=========== Programação Orientada a Objetos =========== 

-> Paradigma onde tenta aproximar a programação do mundo real.

4 pilares: 

1° Encapsulamento: forma de esconder a implementação da classe;
2° Herança: maneira de herdar atributos e comportamentos de uma classe;
3° Polimorfismo: maneira que um objeto muda seu comportamento de diferentes formas;
4° Abstração: pensar na forma de aproximar do mundo real


Orientação a objetos visa a melhor manutenção de um sistema e o rápido desenvolvimento de maneira rápida. 



=========== Classe, objeto, atributos e metódos =========== 

Classe: seria o molde do objeto pensado;
Objeto: seria a instância da classe ou seja a criação;
Atributos: caracteristicas que fazem parte da classe;
Metodos: Comportamentos; 

=========== Constructor =========== 

Serve para inicializar objetos e falar o que é necessário ser inicializado;

Uma classe pode possuir mais de 1 contrutor (conceito de sobrecarga) 

A ideia disso é justamente para quando a classe for instanciada ela ter alguns atributos já definido;

=========== Modificadores de acessos =========== 

https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers

Serve para controlar a visibilidade da classe, seus metodos e atributos dentro do projeto;

public: não existe restrição / é visivel para todos;
private: acesso limitado a classes, sempre quando uma classe é criada ela por default é private
internal: acesso limitado dentro do assembly (projetos externos não tem acesso)
protect: acesso limitado a membros de mesma classe e herança.

=========== Propriedades e encapsulamento =========== 

Encapsulamento: Processo de esconder os membros de uma classe para um acesso exterior;

Get = retorna o valor de uma propriedade;
Set = atribuição de valor para uma propriedade;

=========== Modelos de dominios =========== 

Modelo: seria a models, a representação do mundo real;

Modelo anêmico: são models "pobres", que não possui validação;
Modelos ricos: são models que consegue tratar situações dentro da própria classe;

=========== Métodos e Hierarquia de projeto =========== 

Método = bloco de código, com instruções, possui modificadores e assinatura (tipo, nome, modificador de acesso e params).

Hierarquia de um projeto:
Namespace {
	classe {
		método { 
		}
	}

}

Método Main: ponto de entrada a aplicação, chamada pela CLR (Common Language Runtime);


=========== Sobrecarga / Overload =========== 
Método com o mesmo nome, mas assinatura diferente.

ex: 
public int Somar(int num1, int num2){}
public int Somar(int num1, int num2, int num3){}



=========== Parâmetro opcional =========== 
* Parâmetros que possuem um valor constante, mas podem sem modificados, caso não seja modificado é atribuido o valor padrão. 

exemplos: 

public int Somar (int num1, int x = 20, int z = 30){}

=========== Métodos Estáticos =========== 

É usado a palavra reservada static;
Basicamente, quando usado o static é indicado que o item não precisa ser instanciado para ser utilizado;
Ou seja é possível utilizar o metódo, atributo, classe de qualquer lugar

Um exemplo é o metedo WriteLine ou ReadLine que não precisa de instância.

=========== Herança =========== 

É um dos pilares da OO, basicamente possibilita a relação de classes, ou seja uma classe (filha) herda os atributos, metódos, construtores, de uma classe pai.

Serve para reutilizar código.

É possivel sobrescrever um metodo pai

para isso basta colocar a palavra virtual nno metodo pai 

public virtual void Falar(){}

E na classe filho para sobrescrever é preciso utilizar o override.

public override void Falar(){}

A palavra base() serve para reaproveitar algumas coisas da classe pai  (!!!!!!estudar melhor!!!!!!)


=========== As and Is =========== 

As: é usado para executar a conversão entre tipos de referência compativel ou tipo anulados.

Is: é para verificar se o objeto é compativel com o tipo especificado.



